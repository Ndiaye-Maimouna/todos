name: Build Main Branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Checkout du code
      - name: Checkout du code
        uses: actions/checkout@v3

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Scan de secrets
      - name: Scan de secrets (Gitleaks)
        uses: zricethezav/gitleaks-action@v1
        with:
          args: --path=. --verbose

      # Scan des vulnérabilités
      - name: Créer le dossier de rapport
        run: mkdir -p reports && sudo chown -R 1000:1000 reports

      - name: Lancer le scan OWASP Dependency-Check
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/src" \
            owasp/dependency-check:latest \
            --project "scan-owasp" \
            --scan /src \
            --format "HTML" --format "JSON" \
            --out /src/reports \
            --nvdApiKey "${{ secrets.NVD_API_KEY }}" \
            --failOnCVSS 10

      # Compilation et tests
      - name: Compilation et tests
        run: mvn clean verify -Put -Pit

      # Analyse qualité de code avec Sonar
      - name: Analyse qualité de code avec Sonar
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=todos \
            -Dsonar.organization=todos \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Vérification du Quality Gate
      - name: Vérifier le Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      # Release
      - name: Lecture de la version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Incrémentation de version
        run: |
          VERSION=$(cat version.txt)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF++; print}' OFS=.)
          echo $NEW_VERSION > version.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"
          git tag "v$NEW_VERSION"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:main
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} --tags


      # Build and Publish to Docker
      - name: Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          VERSION=$(cat version.txt)
          docker build -t todos:$VERSION .
          docker tag todos:$VERSION todos:latest

      - name: Push Docker images
        run: |
          VERSION=$(cat version.txt)
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:latest
          
      # Deploiment
      - name: Installer Railway CLI
        run: curl -sSL https://railway.app/install.sh | sh

      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
        run: railway up --service $RAILWAY_SERVICE_ID --path-as-root .

      # DAST
      - name: Attendre que l'application soit disponible
        run: sleep 30

      - name: Installer Nuclei
        run: |
          curl -s https://api.github.com/repos/projectdiscovery/nuclei/releases/latest \
          | grep "browser_download_url.*linux_amd64.zip" \
          | cut -d '"' -f 4 \
          | xargs wget -O nuclei-linux-amd64.zip
          unzip -o nuclei-linux-amd64.zip
          chmod +x nuclei
          sudo mv nuclei /usr/local/bin/


      - name: Mettre à jour les templates
        run: nuclei -update-templates

      - name: Créer dossier de rapport dans /tmp
        run: mkdir -p /tmp/reports

      - name: Exécuter le scan
        run: nuclei -u https://cicd-todos-production.up.railway.app/cicd/ -o /tmp/reports/nuclei.txt

      - name: Uploader le rapport brut
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-report
          path: /tmp/reports/nuclei.txt

      - name: Générer statistiques
        run: |
          REPORT_PATH="/tmp/reports/nuclei.txt"
          STATS_PATH="/tmp/reports/nuclei_stats.txt"

          TOTAL=$(wc -l < "$REPORT_PATH")
          INFO=$(grep -c '\[info\]' "$REPORT_PATH" || true)
          LOW=$(grep -c '\[low\]' "$REPORT_PATH" || true)
          MEDIUM=$(grep -c '\[medium\]' "$REPORT_PATH" || true)
          HIGH=$(grep -c '\[high\]' "$REPORT_PATH" || true)
          CRITICAL=$(grep -c '\[critical\]' "$REPORT_PATH" || true)

          echo "====== Statistiques Nuclei ======" > "$STATS_PATH"
          echo "Nombre total de lignes (détections) : $TOTAL" >> "$STATS_PATH"
          echo "Par gravité (via tags) :" >> "$STATS_PATH"
          echo "info: $INFO" >> "$STATS_PATH"
          echo "low: $LOW" >> "$STATS_PATH"
          echo "medium: $MEDIUM" >> "$STATS_PATH"
          echo "high: $HIGH" >> "$STATS_PATH"
          echo "critical: $CRITICAL" >> "$STATS_PATH"
          

      - name: Uploader les statistiques
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-stats
          path: /tmp/reports/nuclei_stats.txt