name: Build Main Branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Checkout du code
      - name: Checkout du code
        uses: actions/checkout@v3

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Scan de secrets (Gitleaks)
      - name: Scan de secrets (Gitleaks)
        uses: zricethezav/gitleaks-action@v1
        with:
          args: --path=. --verbose


      # Scan des vulnérabilités (OWASP Dependency-Check)
#      - name: Scan des vulnérabilités des dépendances
#        uses: dependency-check/Dependency-Check_Action@main
#        with:
#          project: "main-scan"
#          format: "HTML"
#          failOnCVSS: 7.0
      - name: Lancer le scan OWASP Dependency-Check
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/src" \
            owasp/dependency-check:latest \
            --project "scan-owasp" \
            --scan /src \
            --format "HTML" --format "JSON" \
            --out /src/reports \
            --nvdApiKey "${{ secrets.NVD_API_KEY }}" \
            --failOnCVSS 10

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: ./reports/dependency-check-report.json


      # Compilation et tests
      - name: Compilation et tests
        run: mvn clean verify -Put -Pit

      # Analyse qualité de code avec Sonar
      - name: Analyse qualité de code avec Sonar
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=todos \
            -Dsonar.organization=todos \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Vérification du Quality Gate
      - name: Vérifier le Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      # Release
      - name: Lecture de la version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Incrémentation de version
        run: |
          VERSION=$(cat version.txt)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF++; print}' OFS=.)
          echo $NEW_VERSION > version.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Bump version to $NEW_VERSION" || echo "No changes to commit"
          git tag "v$NEW_VERSION"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:main
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} --tags

      # Build and Publish to Docker
      - name: Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          VERSION=$(cat version.txt)
          docker build -t todos:$VERSION .
          docker tag todos:$VERSION todos:latest

      - name: Push Docker images
        run: |
          VERSION=$(cat version.txt)
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:latest

#      # Déploiement
#      - name: Déploiement
#        run: |
#          echo "Déploiement à implémenter (Kubernetes, SSH, etc.)"

      # Déploiement sur Kubernetes
      - name: Configurer l'accès Kubernetes
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config get-contexts

      - name: Déploiement Kubernetes
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          VERSION=$(cat version.txt)
          kubectl set image deployment/todos todos=${{ secrets.DOCKER_USERNAME }}/todos:$VERSION -n ${{ secrets.K8S_NAMESPACE }}
          kubectl rollout status deployment/todos -n ${{ secrets.K8S_NAMESPACE }}

      # DAST (placeholder)
      - name: DAST
        run: |
          echo "DAST à implémenter"

      # DAST avec OWASP ZAP
#      - name: DAST avec OWASP ZAP (baseline scan)
#        uses: zaproxy/action-baseline@v0.10.0
#        with:
#          target: "${{ secrets.APP_URL }}"
#          fail_action: true
#          docker_name: "ghcr.io/zaproxy/zaproxy"
#        env:
#          ZAP_API_KEY: ${{ secrets.ZAP_API_KEY || '' }}
