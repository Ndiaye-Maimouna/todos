#name: Build Main Branch
#
#on:
#  push:
#    branches:
#      - main
#      - master
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    env:
#      MY_ENV_VAR: value
#
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Set up Java
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Scan de secrets
#        run: |
#          echo "Todo : Scan de secrets"
#        shell: bash
#
#      - name: Scan des vulnérabilités
#        run: |
#          echo "Todo : Scan des vulnérabilités"
#        shell: bash
#
#      - name: Unit Tests
#        run: |
#          mvn test -Put -Pit
#        shell: bash
#
#      - name: Quality Gate
#        run: |
#          echo "Todo : Quality Gate"
#        shell: bash
#
#      - name: Check Quality Gate
#        run: |
#          echo "Todo : Check Quality Gate"
#        shell: bash
#
#      - name: Release
#        run: |
#          echo "Todo : Release"
#        shell: bash
#
#      - name: Build and Publish to Docker
#        run: |
#          echo "Todo : Build and Publish to Docker"
#        shell: bash
#
#      - name: Déploiement
#        run: |
#          echo "Todo : Déploiement "
#        shell: bash
#
#      - name: DAST
#        run: |
#          echo "Todo : DAST"
#        shell: bash


name: Build Main Branch

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      # Checkout du code
      - name: Checkout du code
        uses: actions/checkout@v3

      # Scan de secrets (Gitleaks)
      - name: Scan de secrets (Gitleaks)
        uses: gitleaks/actions/gitleaks@v2
        with:
          args: detect --source=. --verbose

      # Scan des vulnérabilités (OWASP Dependency-Check)
      - name: Scan des vulnérabilités des dépendances
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "main-scan"
          format: "HTML"
          failOnCVSS: 7.0

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Compilation et tests
      - name: Compilation et tests
        run: mvn clean verify -Put -Pit

      # Analyse qualité de code avec Sonar
      - name: Analyse qualité de code avec Sonar
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=todos \
            -Dsonar.organization=todos \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Vérification du Quality Gate
      - name: Vérification du Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        with:
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          sonar-host-url: https://sonarcloud.io

      # Release
      - name: Lecture de la version
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Incrémentation de version
        run: |
          VERSION=$(cat version.txt)
          NEW_VERSION=$(echo $VERSION | awk -F. '{$NF++; print}' OFS=.)
          echo $NEW_VERSION > version.txt
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git commit -am "Bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      # Build and Publish to Docker
      - name: Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          VERSION=$(cat version.txt)
          docker build -t monapp:$VERSION .
          docker tag todos:$VERSION todos:latest

      - name: Push Docker images
        run: |
          VERSION=$(cat version.txt)
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker tag todos:$VERSION ${{ secrets.DOCKER_USERNAME }}/todos:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/todos:latest

      # Déploiement
      - name: Déploiement
        run: |
          echo "Déploiement à implémenter (Kubernetes, SSH, etc.)"

      # DAST (placeholder)
      - name: DAST
        run: |
          echo "DAST à implémenter"
